NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
NetC <- rbind(NetC, c(4, 2), c(2,3), c(3,1))
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome()
Net <- read.table("~/Documents/GitHub/shiny_cv/data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
nodes <- data.frame(node = unique(Net$node))
nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge), group = Net$group))
nodes
nodes$id <- c(1:nrow(nodes))
nodes <- select(nodes, id, node, group)
colnames(nodes) <- c("id", "label", "group")
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome()
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- rbind(NetC, c(4, 2), c(2,3), c(3,1))
NetC <- select(NetB, from, to)
Net
Net <- read.table("~/Documents/GitHub/shiny_cv/data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
Net
nodes <- data.frame(node = unique(Net$node))
nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge), group = Net$group))
nodes
nodes$id <- c(1:nrow(nodes))
nodes <- select(nodes, id, node, group)
colnames(nodes) <- c("id", "label", "group")
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
NetC <- rbind(NetC, c(4, 2), c(2,3), c(3,1))
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome()
shiny::runApp(system.file("shiny", package = "visNetwork"))
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
shiny::runApp(system.file("shiny", package = "visNetwork"))
runApp('Documents/GitHub/shiny_cv')
shiny::runApp(system.file("shiny", package = "visNetwork"))
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
shiny::runApp(system.file("shiny", package = "visNetwork"))
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
shiny::runApp(system.file("shiny", package = "visNetwork"))
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
?visOptions
nodes
nodes$group[teaching]
nodes$group["teaching"]
nodes <- data.frame(id = 1:15, label = paste("Label", 1:15),
group = sample(LETTERS[1:3], 15, replace = TRUE))
nodes
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
shiny::runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
runApp('Documents/GitHub/shiny_cv')
shiny::runApp('Documents/GitHub/shiny_cv')
setwd("~/Documents/GitHub/shiny_cv/")
## Create Awards DF.
awards <- read.table("data/awards.txt", h=T, na.strings="na", sep="\t", stringsAsFactors = F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.Date("2014-01-20")
as.Date("2014-01-15")
as.Date("2015-01-15")
# awards2 <- subset(awards, !is.na(awards$date_end))
# awards2 <- subset(awards, date >= minDate & (date_end <= maxDate | is.na(date_end)))
awards <- rbind(awards, c("test", "15000", NA, NA, as.Date("2015-01-15"), NA, NA))
View(awards)
str(awards)
runApp()
## Create Awards DF.
awards <- read.table("data/awards.txt", h=T, na.strings="na", sep="\t", stringsAsFactors = F)
awards <- rbind(awards, c("test", "15000", NA, NA, "2015-01-15", NA, NA))
awards$duration <- as.numeric(awards$duration)
awards$date <- as.Date(awards$date)
awards$date_end <- as.Date(awards$date_end)
awards$duration <- awards$date_end - awards$date
## Reorder by date, and add ranking for clicking later.
awards <- awards[order(awards$date, decreasing = T),]
awards$rank <- c(1:nrow(awards))
awards$award_name <- factor(awards$award_name, levels = awards$award_name)
ggplot(awards, aes(fill = amount, x = award_name, y = date + duration/2)) +
geom_tile(aes(height = duration, width = 0.9)) +
geom_point(data = subset(awards, is.na(awards$date_end)), aes(x = award_name, y = date, size = 10, fill = amount)) +
scale_color_viridis(option = input$awardColour, begin = input$awardColourSlider[1], end = input$awardColourSlider[2]) +
scale_fill_viridis(option = input$awardColour, begin = input$awardColourSlider[1], end = input$awardColourSlider[2]) +
coord_flip() +
theme_classic() +
# theme(legend.position = "none") +
xlab("") +
ylab("") +
scale_y_date(date_breaks = "1 year", date_labels = "%Y")
runApp()
View(awards)
runApp()
runApp()
## Create Awards DF.
awards <- read.table("data/awards.txt", h=T, na.strings="na", sep="\t", stringsAsFactors = F)
str(awards)
awards <- rbind(awards, c("test", "15000", "award", NA, "2015-01-15", NA, "blahb lahblah"))
str(awards)
runApp()
runApp()
## Create Awards DF.
awards <- read.table("data/awards.txt", h=T, na.strings="na", sep="\t", stringsAsFactors = F)
awards <- rbind(awards, c("test", 15000, "award", NA, "2015-01-15", NA, "blahb lahblah"))
awards <- rbind(awards, c("test", integer(15000), "award", NA, "2015-01-15", NA, "blahb lahblah"))
## Create Awards DF.
awards <- read.table("data/awards.txt", h=T, na.strings="na", sep="\t", stringsAsFactors = F)
awards <- rbind(awards, c("test", integer(15000), "award", NA, "2015-01-15", NA, "blahb lahblah"))
str(awards)
awards$amount <- integer(awards$amount)
awards$amount <- as.integer(awards$amount)
## Create Awards DF.
awards <- read.table("data/awards.txt", h=T, na.strings="na", sep="\t", stringsAsFactors = F)
awards <- rbind(awards, c("test", integer(15000), "award", NA, "2015-01-15", NA, "blahb lahblah"))
## Create Awards DF.
awards <- read.table("data/awards.txt", h=T, na.strings="na", sep="\t", stringsAsFactors = F)
awards <- rbind(awards, c("test", as.integer(15000), "award", NA, "2015-01-15", NA, "blahb lahblah"))
str(awards)
awards$amount <- as.integer(awards$amount)
str(awards)
runApp()
runApp()
?scale_fill_viridis
?scale_fill_gradient
runApp()
runApp()
runApp()
runApp()
## Create Awards DF.
awards <- read.table("data/awards.txt", h=T, na.strings="na", sep="\t", stringsAsFactors = F)
View(awards)
runApp()
awards$duration <- as.numeric(awards$duration)
awards$date <- as.Date(awards$date)
awards$date_end <- as.Date(awards$date_end)
awards$duration <- awards$date_end - awards$date
## Reorder by date, and add ranking for clicking later.
awards <- awards[order(awards$date, decreasing = T),]
awards$rank <- c(1:nrow(awards))
awards$award_name <- factor(awards$award_name, levels = awards$award_name)
runApp()
awards$Value
min(awards$Value)
max(awards$Value)
str(awards)
min(awards$Value)
max(awards$Value)
class(awards$Value)
?min
class(as.numeric(awards$Value))
min(as.numeric(awards$Value))
max(as.numeric(awards$Value))
awards$Value
max(awards$Value, na.rm = T)
min(awards$Value, na.rm = T)
runApp()
max(awards$Value, na.rm = T)
min(awards$Value, na.rm = T)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?guides
runApp()
runApp()
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
##Define nodes
nodes <- data.frame(node = unique(Net$node))
View(nodes)
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
View(nodes)
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
View(nodes)
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- select(nodes, id, node, group)
nodes <- left_join(Net, nodes, by = c())
View(nodes)
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
View(Net)
nodes <- left_join(Net, nodes, by = c("edge" = "node"))
View(nodes)
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(Net, nodes, by = c("edge" = "node"))
colnames(nodes) <- c("id", "label", "group")
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(Net, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, node, group)
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(Net, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, edge, group)
colnames(nodes) <- c("id", "label", "group")
runApp()
##Create edgelist
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
##Manually define education nodes - avoids creating duplicate degree nodes
NetC <- rbind(NetC, c(4, 2), c(2,3), c(3,1))
##build the network analysis
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome() %>%
visOptions(selectedBy = list(variable = "group"))
nodes$ids
nodes$id
unique(nodes$id)
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(Net, nodes, by = c("edge" = "node"))
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
subNet <- select(Net, edge, group)
View(subNet)
duplicated(subNet)
subNet <- select(Net, edge, group) %>% !duplicated()
subNet <- !duplicated(subNet)
subNet <- subNet[!duplicated(subNet),]
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
subNet <- select(Net, edge, group)
subNet <- subNet[!duplicated(subNet),]
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(Net, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, edge, group)
colnames(nodes) <- c("id", "label", "group")
##Create edgelist
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
##Manually define education nodes - avoids creating duplicate degree nodes
NetC <- rbind(NetC, c(4, 2), c(2,3), c(3,1))
##build the network analysis
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome() %>%
visOptions(selectedBy = list(variable = "group"))
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
subNet <- select(Net, edge, group)
subNet <- subNet[!duplicated(subNet),]
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(subNet, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, edge, group)
colnames(nodes) <- c("id", "label", "group")
##Create edgelist
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
##Manually define education nodes - avoids creating duplicate degree nodes
NetC <- rbind(NetC, c(4, 2), c(2,3), c(3,1))
##build the network analysis
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome() %>%
visOptions(selectedBy = list(variable = "group"))
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
subNet <- select(Net, edge, group)
subNet <- subNet[!duplicated(subNet),]
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(subNet, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, edge, group)
colnames(nodes) <- c("id", "label", "group")
##Create edgelist
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
##build the network analysis
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome() %>%
visOptions(selectedBy = list(variable = "group"))
View(NetC)
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
subNet <- select(Net, edge, group)
subNet <- subNet[!duplicated(subNet),]
subNet <- rbind(subNet, c("BSc", "degree"))
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes <- rbind(nodes, "BSc")
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(subNet, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, edge, group)
colnames(nodes) <- c("id", "label", "group")
##Create edgelist
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
##build the network analysis
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome() %>%
visOptions(selectedBy = list(variable = "group"))
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
subNet <- select(Net, edge, group)
subNet <- subNet[!duplicated(subNet),]
subNet <- rbind(subNet, c("BSc", "degree"))
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(subNet, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, edge, group)
colnames(nodes) <- c("id", "label", "group")
##Create edgelist
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
##build the network analysis
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome() %>%
visOptions(selectedBy = list(variable = "group"))
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
subNet <- select(Net, edge, group)
subNet <- subNet[!duplicated(subNet),]
subNet <- rbind(subNet, c("BSc", "degree"))
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(subNet, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, edge, group)
colnames(nodes) <- c("id", "label", "group")
##Create edgelist
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
##build the network analysis
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome() %>%
visOptions(selectedBy = list(variable = "group"))
##Network analysis with visNetwork
output$visNet <- renderVisNetwork({
## Build DF
Net <- read.table("data/network.txt", h = T, stringsAsFactors = F, sep = "\t")
subNet <- select(Net, edge, group)
subNet <- subNet[!duplicated(subNet),]
subNet <- rbind(subNet, c("BSc", "degree"))
##Define nodes
nodes <- data.frame(node = unique(Net$node))
# nodes$group <- "degree"
nodes <- rbind(nodes, data.frame(node = unique(Net$edge)))
nodes <- unique(nodes)
nodes$id <- c(1:nrow(nodes))
nodes <- left_join(subNet, nodes, by = c("edge" = "node"))
nodes <- select(nodes, id, edge, group)
colnames(nodes) <- c("id", "label", "group")
##Create edgelist
Net <- select(Net, node, edge)
NetA <- left_join(Net, nodes, by = c("node" = "label")) %>%  rename(from = id) %>% select(node, edge, from)
NetB <- left_join(NetA, nodes, by = c("edge" = "label")) %>% rename(to = id)
NetC <- select(NetB, from, to)
##Manually define education nodes - avoids creating duplicate degree nodes
# NetC <- rbind(NetC, c(4, 2), c(2,3), c(3,1))
##build the network analysis
visNetwork(nodes, NetC) %>%
visGroups(groupname = "award", shape = "icon", icon = list(code = "f091", color = "green")) %>%
visGroups(groupname = "teaching", shape = "icon", icon = list(code = "f086", color = "purple")) %>%
visGroups(groupname = "work", shape = "icon", icon = list(code = "f0f1", color = "red")) %>%
visGroups(groupname = "publication", shape = "icon", icon = list(code = "f15c", color = "orange")) %>%
visGroups(groupname = "degree", shape = "icon", icon = list(code = "f19d")) %>%
addFontAwesome() %>%
visOptions(selectedBy = list(variable = "group"))
})
runApp()
